These notes are based off of the The OAuth 1.0 Protocol specified
by rfc5849.

terminology:
  client: An HTTP client (per RFC2616) capable of making OAuth authenticated
  requests.

  server: An HTTP server (per RFC2616) capable of accepting OAuth authenticated
  requests.

  protected resource: An access-restricted resource that can be obtained from 
  the server using an OAuth authenticated request.

  resource owner:An entity capable of accessing and controlling protected
  resources by using credentials to authenticate with the server.
  
  credentials:Credentials are a pair of a unique identifier and a matching
  shared secret.  OAuth defines three classes of credentials:
  client, temporary, and token, used to identify and authenticate
  the client making the request, the authorization request, and
  the access grant, respectively.

  token: A unique identifier issued by the server and used by the client
  to associate authenticated requests with the resource owner
  whose authorization is requested or has been obtained by the
  client.  Tokens have a matching shared-secret that is used by
  the client to establish its ownership of the token, and its
  authority to represent the resource owner.
 
OAuth allows 
  -a client to access protected resources on behalf of the resource owner
  -verifies identity of client, as well as resource owner
  -allows resource owner to attain resources through client without giving
    credentials to client


Terms for below:
   user: owner of protected resources on server, using client, e.g.: Jane
   user-agent: the program or application user is using, provided by the
   client

OAuth order of operations:
  1. Client establishes a set of temporary credentials with server.
  2. Upon receiving temporary credentials from server, client redirects
     user-agent to the server's Resource Owner Authorization endpoint to
     obtain approval for accessing protected resource.
  3. The server asks user to sign in using username and password, and if 
     successful, asks user to approve granting client access to user's
     protected resources (it could be all protected resources or just
     a subset of protected resources, depends on what client needs,
     etc)  
  4. User approves the request and user, along with user-agent, is redirected
     to the callback uri provided by the client in previous request.the callback
     request informs client that user completed the authorization process. 
  5. The client then requests a set of token credentials using temporary
     credentials (over a secure Transport Layer Security (TLS) channel).
  6. The server validates the request and replies with a set of token
     credentials in body of HTTP response. 
  7. With a set of token credentials, the client can now request the protected
     resources it was granted access to.
  8. The server validates the request and responds with requested protected
     resource. The client can continue accessing user's protected resources
     using the same set of token credentials for the duration of the user's
     authorization, or until the user revokes access.

