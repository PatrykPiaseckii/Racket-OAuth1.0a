

-very easy to create a bad api
  -if a design flaw results in inefficient code
  it is amplified due to the api being called
  many times
  -separate design flaws, minor when in isolation,can
  lead to who knows what when they interact with each
  other

-api design is very similar to program design
  -awkward design decisions lead users of the api
  to program awkward solutions

-lower in the abstraction hierarchy an API defect
occurs, the more serious the consequences

some guidelines on good api design
-api must provide sufficient functionality for the caller to
achieve its task
-api should be minimal, but still meet all requirements for
user
  -'smaller is better'
-api must be designed with the use context in mind

-general purpose api should be policy free, special purpose 
api's should be policy rich
  -design of the api can lead to the style and semantics of how
  programmers use it
  -and so general api's should not enforce any such 'style'
  -ex: if little is known about the context of which the api will be used
  the designer must keep all the options open and allow the api to be as widely
  applicable as possible
-api's should be designed from the perspective of the caller
-api's should not be afraid to set policy, think hard on what the caller
will be using the api for, think of the most common use cases and design
for them
-api's should be documented before they are implemented
  -if written after, the implementer will have the tendency to just write what
  they have done, leading to incomplete documentation due to being too close
  to the implementation
  -behavior of api when things go wrong (errors) is just important as the behavior
  of the api when things go right, for complete documentation include both

